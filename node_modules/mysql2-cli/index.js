#!/usr/bin/env node
const readline = require("readline");
const ConsoleGrid = require("console-grid");
const grid = new ConsoleGrid();
const argv = require("argv");
const inquirer = require("inquirer");
const { Sequelize } = require("sequelize");

let sequelize;
let tips = "mysql> ";
const questions = [
  {
    type: "input",
    name: "uri",
    message: "What's your uri",
  },
];
var data = {
  columns: [
    {
      id: "xxx",
      name: "Name",
    },
    {
      id: "x",
      name: "Value",
    },
  ],
  rows: [
    {
      xxx: "Row 1",
      x: "1",
    },
    {
      xxx: "Row 2",
      x: "2",
    },
  ],
};
let args = argv
  .option([
    {
      name: "host",
      short: "h",
      type: "string",
      description: "connect host by default localhost",
      example: "'mysql-cli -h localhost -u root -p",
    },
    {
      name: "port",
      short: "P",
      type: "string",
      description: "port default 3306",
      example: "'mysql-cli -h localhost -u root -P 3306",
    },
    {
      name: "user",
      short: "u",
      type: "string",
      description: "username by default root",
      example: "'mysql-cli -h localhost -u root -p",
    },
    {
      name: "password",
      short: "p",
      type: "string",
      description: "password by default ''",
      example: "'mysql-cli -h localhost -u root -p",
    },
  ])
  .run();
argv.version("v1.0");

main();
async function main() {
  //   sequelize = new Sequelize("mysql://root:123456@localhost:3306/mysql");
  //   await execSql("show databases");
  //   await execSql("use mysql");
  //   setTimeout(async () => {
  //     const [results, metadata] = await execSql("show tables");
  //     console.log(results);
  //   }, 3000);

  present();
}

function present() {
  inquirer.prompt(questions).then((answers) => {
    createConnection(answers.uri);
  });
}
function createConnection(uri) {
  sequelize = new Sequelize(uri);
  readSyncByRl();
}
function distoryConnection() {
  sequelize.close();
}
async function execSql(sql) {
  let time = Date.now();
  try {
    const [results, metadata] = await sequelize.query(sql);
    console.log(`time total:${Date.now() - time}ms`);

    if (Array.isArray(results)) {
      return results;
    }
  } catch (e) {
    console.log("Error", e.original.sqlMessage);
  }

  return [];
}

function readSyncByRl() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  rl.question(tips, (answer) => {
    if (answer.trim().indexOf("exit") > -1) {
      console.log("bye");
      rl.close();
      distoryConnection();
      return;
    }
    execSql(answer).then((fields) => {
      if (fields.length > 0) {
        let table = dataStucture(Object.keys(fields[0]), fields);
        if (table) grid.render(table);
      }
      rl.close();
      console.log(answer.trim());
      readSyncByRl();
    });
  });
}

function dataStucture(col, row) {
  if (!col || !row) return null;

  const columns = col.map((item) => ({ id: item }));
  console.log(columns);
  const rows = row;
  return {
    columns,
    rows,
  };
}
